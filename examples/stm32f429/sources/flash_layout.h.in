#ifndef INCLUDE_ARM_M_PROFILE_FLASH_LAYOUT_H
#define INCLUDE_ARM_M_PROFILE_FLASH_LAYOUT_H

#include <cstddef>
#include <cstdint>

namespace flash_layout {
constexpr size_t total_begin = ${total_begin};
constexpr size_t total_end = total_begin + ${total_size};

constexpr size_t bootl_begin = ${bootl_begin};
constexpr size_t bootl_end = bootl_begin + ${bootl_size};

constexpr size_t param_begin = ${param_begin};
constexpr size_t param_end = param_begin + ${param_size};
constexpr size_t param_backup_begin = ${param_backup_begin};
constexpr size_t param_backup_end = param_backup_begin + ${param_backup_size};

constexpr size_t event_begin = ${event_begin};
constexpr size_t event_end = event_begin + ${event_size};

constexpr size_t appl_begin = ${appl_begin};
constexpr size_t appl_end = appl_begin + ${appl_size};
constexpr size_t appl_backup_begin = ${appl_backup_begin};
constexpr size_t appl_backup_end = appl_backup_begin + ${appl_backup_size};

constexpr size_t aux_1_begin = ${aux_1_begin};
constexpr size_t aux_1_end = aux_1_begin + ${aux_1_size};
constexpr size_t aux_2_begin = ${aux_2_begin};
constexpr size_t aux_2_end = aux_2_begin + ${aux_2_size};
constexpr size_t aux_3_begin = ${aux_3_begin};
constexpr size_t aux_3_end = aux_3_begin + ${aux_3_size};

static_assert(${total_size} ==
                  ${bootl_size} + ${param_size} + ${param_backup_size} +
                      ${event_size} + ${appl_size} + ${appl_backup_size} +
                      ${aux_1_size} + ${aux_2_size} + ${aux_3_size},
              "flash size mismatch");

struct Homogenous_Paged_Area {
  size_t begin;
  size_t bound;
  size_t index;
  size_t page_size;

  constexpr bool contains(size_t address) const {
    return begin <= address && address < bound;
  }
  constexpr size_t page_of(size_t address) const {
    return ((address - begin) / page_size) + index;
  }
  constexpr bool can_enumerate_page_of(size_t address) const {
    return begin <= address && address <= bound;
  }
  constexpr bool page_starts_at(size_t address) const {
    return ((address - begin) % page_size) == 0;
  }
};

constexpr Homogenous_Paged_Area flash_areas[] = {
    ${HOMOGENOUS_PAGED_AREA_INITIALIZER}};

constexpr size_t page_of(size_t address) {
  for (const auto &area : flash_areas) {
    if (area.can_enumerate_page_of(address)) {
      return area.page_of(address);
    }
  }
  return ~size_t(0);
}

constexpr size_t bootl_begin_page = page_of(bootl_begin);
constexpr size_t bootl_end_page = page_of(bootl_end);

constexpr size_t param_begin_page = page_of(param_begin);
constexpr size_t param_end_page = page_of(param_end);
constexpr size_t param_backup_begin_page = page_of(param_backup_begin);
constexpr size_t param_backup_end_page = page_of(param_backup_end);

constexpr size_t event_begin_page = page_of(event_begin);
constexpr size_t event_end_page = page_of(event_end);

constexpr size_t appl_begin_page = page_of(appl_begin);
constexpr size_t appl_end_page = page_of(appl_end);
constexpr size_t appl_backup_begin_page = page_of(appl_backup_begin);
constexpr size_t appl_backup_end_page = page_of(appl_backup_end);

constexpr size_t aux_1_begin_page = page_of(aux_1_begin);
constexpr size_t aux_1_end_page = page_of(aux_1_end);
constexpr size_t aux_2_begin_page = page_of(aux_2_begin);
constexpr size_t aux_2_end_page = page_of(aux_2_end);
constexpr size_t aux_3_begin_page = page_of(aux_3_begin);
constexpr size_t aux_3_end_page = page_of(aux_3_end);

} // namespace flash_layout

#endif
